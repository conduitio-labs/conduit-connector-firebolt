// Code generated by MockGen. DO NOT EDIT.
// Source: destination/destination.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	firebolt "github.com/conduitio-labs/conduit-connector-firebolt/firebolt"
	sdk "github.com/conduitio/conduit-connector-sdk"
	gomock "github.com/golang/mock/gomock"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockWriter) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockWriterMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockWriter)(nil).Close), ctx)
}

// InsertRecord mocks base method.
func (m *MockWriter) InsertRecord(ctx context.Context, record sdk.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertRecord", ctx, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertRecord indicates an expected call of InsertRecord.
func (mr *MockWriterMockRecorder) InsertRecord(ctx, record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertRecord", reflect.TypeOf((*MockWriter)(nil).InsertRecord), ctx, record)
}

// MockFireboltClient is a mock of FireboltClient interface.
type MockFireboltClient struct {
	ctrl     *gomock.Controller
	recorder *MockFireboltClientMockRecorder
}

// MockFireboltClientMockRecorder is the mock recorder for MockFireboltClient.
type MockFireboltClientMockRecorder struct {
	mock *MockFireboltClient
}

// NewMockFireboltClient creates a new mock instance.
func NewMockFireboltClient(ctrl *gomock.Controller) *MockFireboltClient {
	mock := &MockFireboltClient{ctrl: ctrl}
	mock.recorder = &MockFireboltClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFireboltClient) EXPECT() *MockFireboltClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFireboltClient) Close(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", ctx)
}

// Close indicates an expected call of Close.
func (mr *MockFireboltClientMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFireboltClient)(nil).Close), ctx)
}

// IsEngineStarted mocks base method.
func (m *MockFireboltClient) IsEngineStarted(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEngineStarted", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEngineStarted indicates an expected call of IsEngineStarted.
func (mr *MockFireboltClientMockRecorder) IsEngineStarted(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEngineStarted", reflect.TypeOf((*MockFireboltClient)(nil).IsEngineStarted), ctx)
}

// Login mocks base method.
func (m *MockFireboltClient) Login(ctx context.Context, params firebolt.LoginParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockFireboltClientMockRecorder) Login(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockFireboltClient)(nil).Login), ctx, params)
}

// RunQuery mocks base method.
func (m *MockFireboltClient) RunQuery(ctx context.Context, query string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunQuery", ctx, query)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RunQuery indicates an expected call of RunQuery.
func (mr *MockFireboltClientMockRecorder) RunQuery(ctx, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunQuery", reflect.TypeOf((*MockFireboltClient)(nil).RunQuery), ctx, query)
}

// StartEngine mocks base method.
func (m *MockFireboltClient) StartEngine(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartEngine", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartEngine indicates an expected call of StartEngine.
func (mr *MockFireboltClientMockRecorder) StartEngine(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEngine", reflect.TypeOf((*MockFireboltClient)(nil).StartEngine), ctx)
}
